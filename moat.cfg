doc: 'This is a sample configuration file. It''s written in YAML because that''s structured
  and easy to read.

  The "cfg" program can extract single entries from this. It will concatenate list
  entries and convert hashes to C flags definitions.

  ''_ref'' means that whatever key is not here is looked up there, so the value of
  test.1.foo is ''bar''. ''_default'' does the same thing, except that the key is
  skipped, so the value of test.1.foo.seven is ''six''.

  ''targets:'' lists the devices that are built by default.

  "cfg <file> .cdefs DEVICE" generates -DXXX=yy command-line arguments.

  "cfg <file> .cfiles DEVICE" lists the input files required for building.

  The "cfgw" program updates or adds values. It does not follow ''_ref'' links and
  ''_default'' entries, so only specific values will be overwritten.'
test:
- foo:
    one: two
    three: four
    _default: six
  baz: quux
- _ref: test.0
  ever:
  - you say
  - too
  foo:
    one: five
env:
  prog: usbtiny
codes:
  onewire:
    moat: f0
defaults:
  flags: null
  target:
    _default:
      _defs_doc:
        have_uart: Use serial port for diagnostics
        have_uart_irq: Use interrupt-based serial (else poll)
        have_uart_sync: Don't buffer serial data (no IRQ, no polling, severe delays)
        is_onewire: OW type (moat, ds2408, ds2423)
        use_eeprom: Make config writeable, store in EEPROM
      defs:
        is_onewire: moat
        have_uart: 0
        use_eeprom: 0
    m88:
      _doc: basic atmega88 with internal crystal
      mcu: atmega88
      prog: m88
      defs:
        f_cpu: 8000000
      fuse:
        l: E2
        h: DC
        e: F8
    m88f:
      _doc: version of m88 with external crystal
      _ref: defaults.target.m88
      defs:
        f_cpu: 20000000
      fuse:
        l: FF
devices:
  test:
    defs:
      have_uart: 1
  _default:
    _ref: defaults.target.m88
  two:
    _ref: defaults.target.m88f
  one: {onewire_id: 135254132286146.0}
targets:
- test
- one
- two
