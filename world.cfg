doc: 'This is a sample configuration file. It''s written in YAML because that''s structured
  and easy to read.

  The "cfg" program can extract single entries from this. It will concatenate list
  entries and convert hashes to C flags definitions.

  ''_ref'' means that whatever key is not here is looked up there, so the value of
  test.1.foo is ''bar''. ''_default'' does the same thing, except that the key is
  skipped, so the value of test.1.foo.seven is ''six''.

  ''targets:'' lists the devices that are built by default.

  "cfg <file> .cdefs DEVICE" generates -DXXX=yy command-line arguments.

  "cfg <file> .cfiles DEVICE" lists the input files required for building.

  "cfg <file> .type DEVICE" generates "foo N" stanzas for gen_eeprom''s "type" entry.

  "cfg <file> .hdr DEVICE" generates the file ''device/DEVICE/dev_config.h''.

  The "cfg_write" program updates or adds values. It does not follow ''_ref'' links and
  ''_default'' entries, so only specific values will be overwritten.'
test:
- foo:
    one: two
    three: four
    _default: six
  baz: quux
- _ref: test.0
  ever:
  - you say
  - too
  foo:
    one: five
env:
  prog: usbtiny
codes:
  onewire:
    moat: f0
    ds2408: 29
    ds2423: 1D
  blocks:
  - euid
  - rf12
  - crypto
  - owid
  - type
  - name
  types:
  - console
  - input
  - output
  - temp
  - humid
  - adc
  - pid
  - pwm
  types_x70:
  - info
  - name
  - alert
_doc:
  codes:
    _doc: 'constants for code generation.

      NOTE: The types* values are also defined in OWFS at module/owlib/src/include/ow_moat.h.'
    blocks: data types in EPROM, 1-based
    types: Message types on the bus which correspond to discrete chip functions, 0-based
    types_x70: Feature-independent message types on the bus, 0x70-based
    onewire: 1wire chip types, hex byte (no leading '0x')
  devices:
    NAME:
      defs:
        have_uart: Use serial port for diagnostics
        have_uart_irq: Use interrupt-based serial (else poll)
        have_uart_sync: Don't buffer serial data (no IRQ, no polling, severe delays)
        is_onewire: OW type (moat, ds2408, ds2423)
        use_eeprom: Make config writeable, store in EEPROM
        conditional_search: Make 1wire device discoverable conditionally (alarms, changes etc.)
        single_device: Add 1wire code for SKIP_ROM and READ_ROM
      types:
        _doc:
        - Emitted as N_XXX=y definitions for y>0 with ".cdefs"
        - Emitted as "name
        - also see OWFS: ow_moat.h
        console: channel present?
        input: binary inputs
        output: binary outputs
        temp: temperature sensors
        humid: humidity sensors
        adc: analog-to-digital converters
        pid: autonomous PID controllers
        pwm: outputs that are PWM controlled, i.e. poor man's DAC
defaults:
  flags: null
  types:
    console: 0
    input: 0
    output: 0
    temp: 0
    humid: 0
    adc: 0
    pid: 0
    pwm: 0
  target:
    _default:
      defs:
        is_onewire: moat
        have_uart: 0
        use_eeprom: 0
        conditional_search: 1
        single_device: 1
    m88:
      _doc: basic atmega88 with internal crystal
      mcu: atmega88
      prog: m88
      defs:
        f_cpu: 8000000
      fuse:
        l: E2
        h: DC
        e: F8
    m88f:
      _doc: version of m88 with external crystal
      _ref: defaults.target.m88
      defs:
        f_cpu: 20000000
      fuse:
        l: FF
devices:
  test_ser:
    defs:
      have_uart: 1
      have_irq_catcher: 1
      is_onewire: 0
      dbgpin: 2
    code:
      - test
      - irq_catcher
    
  test2:
    _ref: devices.test
    defs:
      is_onewire: ds2408
      conditional_search: 0
    onewire_id: 241890057482022.0
  test:
    defs:
      have_uart: 1
    fuse:
      _doc: brownout at 2.7V
      h: DC
    onewire_id: 84659526745365.0
    types:
      console: 1
  _default:
    _ref: defaults.target.m88
    types:
      _ref: defaults.types
    code: []
  two:
    _ref: defaults.target.m88f
  one:
    onewire_id: 135254132286146.0
targets:
- test
- one
- two
