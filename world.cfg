doc: 'This is a sample configuration file. It''s written in YAML because that''s structured
  and easy to read.

  The "cfg" program can extract single entries from this. It will concatenate list
  entries and convert hashes to C flags definitions.

  ''_ref'' means that whatever key is not here is looked up there, so the value of
  test.1.foo is ''bar''. ''_default'' does the same thing, except that the key is
  skipped, so the value of test.1.foo.seven is ''six''.

  ''targets:'' lists the devices that are built by default.

  "cfg <file> .cdefs DEVICE" generates -DXXX=yy command-line arguments.

  "cfg <file> .cfiles DEVICE" lists the input files required for building.

  "cfg <file> .type DEVICE" generates "foo N" stanzas for gen_eeprom''s "type" entry.

  "cfg <file> .hdr DEVICE" generates the file ''device/DEVICE/dev_config.h''.

  The "cfg_write" program updates or adds values. It does not follow ''_ref'' links
  and ''_default'' entries, so only specific values will be overwritten.'
test:
- foo:
    one: two
    three: four
    _default: six
  baz: quux
- _ref: test.0
  ever:
  - you say
  - too
  foo:
    one: five
env:
  prog: usbtiny
codes:
  _doc: Do not modify! These are also used by OWFS.
  onewire:
    moat: F0
    ds2408: 29
    ds2423: 1D
  blocks:
  - euid
  - rf12
  - crypto
  - owid
  - type
  - name
  types:
  - console
  - port
  - smoke
  - temp
  - humid
  - adc
  - pid
  - pwm
  types_x70:
  - info
  - config
  - alert
_doc:
  codes:
    _doc: 'constants for code generation.

      NOTE: These values are also defined in OWFS at module/owlib/src/include/ow_moat.h.'
    blocks: data types in EPROM, 1-based
    types: Message types on the bus which correspond to discrete chip functions, 0-based
    types_x70: Feature-independent message types on the bus, 0x70-based
    onewire: 1wire chip ID, hex byte (no leading '0x')
  devices:
    NAME:
      defs:
        have_uart: Use serial port
        have_uart_irq: Use interrupt-based serial (otherwise poll)
        have_uart_sync: Don't buffer serial data (no IRQ, no polling, severe delays)
        debug_uart: debug UART IRQ/poll
        debug_onewire: low-level debug onewire comms
        uart_debug: send debug output to the serial port
        console_debug: send debug output to the console
        console_write: send to the console buf via 1wire (good for testing)
        have_dbg_port: Use a port for diag code output
        have_dbg_pin: Use a port for diag signalling
        have_tov0: code uses timer 0 overflow interrupt
        is_onewire: OW type (moat, ds2408, ds2423)
        need_bits: code needs to read/write single bits
        use_eeprom: Make config writeable, store in EEPROM
        conditional_search: Make 1wire device discoverable conditionally (alarms,
          changes etc.)
        single_device: Add 1wire code for SKIP_ROM and READ_ROM
      types:
        _doc:
        - Emitted as N_XXX=y definitions for y>0 with ".cdefs"
        - Emitted as "name
        - also see OWFS: ow_moat.h
        console: channel present? (only one is supported)
        port: binary inputs and outputs
        temp: temperature sensors
        humid: humidity sensors
        adc: analog-to-digital converters
        pid: autonomous PID controllers
        pwm: outputs that are PWM controlled, i.e. poor man's DAC
        smoke: interfaces with Gira Dual detector
      port:
      - Port to read/write by default. Like "B2" or "D0". Indexed by port number
      - '''^'' : A: 1: output high'
      - '''_'' : B: 0: output low'
      - '''+'' : C: 1: pull-up resistor'
      - '''~'' : D: 0: high-impedance'
      - 'Standard behavior: switch between states A/B and C/D when writing 0/1.'
      - Add / to switch A/D and B/C instead.
      - Add ! to switch A/C and B/D instead. (In that case, CD is 'high'.)
      - Add * to alert on state change. Setting a port sets the expected state to
        whatever you write.
defaults:
  flags: null
  types:
    console: 0
    port: 0
    temp: 0
    humid: 0
    adc: 0
    pid: 0
    pwm: 0
    smoke: 0
  target:
    _default:
      defs:
        is_onewire: moat
        have_uart: 0
        use_eeprom: 0
        conditional_search: 1
        single_device: 1
    heiz:
      _doc: m88 controlling heating
      _ref: defaults.target.m88
      types:
        console: 1
        port: 6
      port:
        1: B2_
        2: B1_
        3: C0~
        4: C1~
        5: C2~
        6: C3~
    m88:
      _doc: basic atmega88 with internal crystal
      mcu: atmega88
      prog: m88
      defs:
        f_cpu: 8000000
      fuse:
        l: E2
        h: DC
        e: F8
      port:
        1: B0~
        2: B1~
        3: B2~
        4: B3~
        5: B4~
        6: B5~
        7: D3~
        8: D4~
        9: D5~
        10: D6~
        11: D7~
        12: C0~
        13: C1~
        14: C2~
        15: C3~
        16: C4~
        17: C5~
        18: C6~
        19: B6~
        20: B7~
    m88f:
      _doc: version of m88 with external crystal
      _ref: defaults.target.m88
      defs:
        f_cpu: 20000000
      fuse:
        l: FF
devices:
  test_ser:
    defs:
      have_uart: 1
      have_uart_irq: 1
      have_irq_catcher: 1
      have_dbg_port: 1
      have_dbg_pin: 1
      have_tov0: 1
      is_onewire: 0
    code:
    - test
    - irq_catcher
  test2:
    _ref: devices.test
    defs:
      is_onewire: ds2408
      conditional_search: 1
    onewire_id: xdbff6af36f26
  heiz1:
    _doc: Test board for heating, v2.7
    _ref: defaults.target.heiz
    onewire_id: x94b934ca233f
  test:
    _doc: '"test8"-Boarduino, using 16MHz crystal osc'
    _ref: devices.test8
    defs:
      f_cpu: 16000000
    fuse:
      l: DE
    onewire_id: x4cff5504bd15
  test8:
    _doc: 'Boarduino, ~8MHz internal osc. Ports used: D0+D1 serial  D2 1wire  D3 debug-bit  C0-C5
      debug-byte(almost)  B3-B5,C6 Programmer '
    defs:
      have_uart: 0
      have_uart_irq: 0
      have_dbg_port: 0
      have_dbg_pin: 0
      have_irq_catcher: 0
      console_write: 1
      debug_uart: 0
      debug_onewire: 0
      console_debug: 1
    onewire_id: x947476a5f130
    port:
      1: B0_
      2: B1^
      3: D6+*
      4: D7~*
    types:
      console: 1
      port: 4
    code:
    - irq_catcher
  _default:
    _ref: defaults.target.m88
    types:
      _ref: defaults.types
    code: []
  two:
    _ref: defaults.target.m88f
  one:
    onewire_id: x7b034e8262c2
targets:
- test
- one
- two
